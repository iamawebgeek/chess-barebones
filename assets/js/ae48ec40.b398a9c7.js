"use strict";(self.webpackChunkchess_barebones_docs=self.webpackChunkchess_barebones_docs||[]).push([[5377],{1134:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>i});var s=o(3917);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},9498:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/react-integration","title":"React Integration","description":"This guide explains how to integrate Chess barebones with React using the @chess-barebones/chess-react package.","source":"@site/docs/guides/react-integration.md","sourceDirName":"guides","slug":"/guides/react-integration","permalink":"/docs/guides/react-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/iamawebgeek/chess-barebones/tree/main/docs/docs/guides/react-integration.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/docs/guides/core-concepts"},"next":{"title":"Puzzles","permalink":"/docs/guides/puzzles"}}');var t=o(1273),r=o(1134);const c={sidebar_position:2},i="React Integration",a={},d=[{value:"The <code>Chess</code> Component",id:"the-chess-component",level:2},{value:"The <code>RegularChess</code> Component",id:"the-regularchess-component",level:2},{value:"The <code>Puzzle</code> Component",id:"the-puzzle-component",level:2},{value:"The <code>useObservablesState</code> Hook",id:"the-useobservablesstate-hook",level:2},{value:"Styling",id:"styling",level:2},{value:"Custom Board Example",id:"custom-board-example",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"react-integration",children:"React Integration"})}),"\n",(0,t.jsxs)(n.p,{children:["This guide explains how to integrate Chess barebones with React using the ",(0,t.jsx)(n.code,{children:"@chess-barebones/chess-react"})," package."]}),"\n",(0,t.jsxs)(n.h2,{id:"the-chess-component",children:["The ",(0,t.jsx)(n.code,{children:"Chess"})," Component"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Chess"})," component is a generic renderer that takes an existing ",(0,t.jsx)(n.code,{children:"Game"})," and ",(0,t.jsx)(n.code,{children:"Board"})," instance, plus a set of UI components, and renders the game. This component gives you full control over the rendering of the board and pieces."]}),"\n",(0,t.jsxs)(n.h2,{id:"the-regularchess-component",children:["The ",(0,t.jsx)(n.code,{children:"RegularChess"})," Component"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"RegularChess"})," component is a convenience component that wires up a ready-to-play chess game for you. It creates an 8x8 board, sets up the standard initial position, creates a ",(0,t.jsx)(n.code,{children:"RegularChess"})," game, and renders it using the ",(0,t.jsx)(n.code,{children:"Chess"})," component."]}),"\n",(0,t.jsxs)(n.h2,{id:"the-puzzle-component",children:["The ",(0,t.jsx)(n.code,{children:"Puzzle"})," Component"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Puzzle"})," component renders a ",(0,t.jsx)(n.code,{children:"Game"})," configured with the ",(0,t.jsx)(n.code,{children:"PuzzleProcessor"})," from ",(0,t.jsx)(n.code,{children:"@chess-barebones/core"}),". You provide an ",(0,t.jsx)(n.code,{children:"initialPosition"})," and a ",(0,t.jsx)(n.code,{children:"movesGenerator"})," to create an interactive puzzle."]}),"\n",(0,t.jsxs)(n.h2,{id:"the-useobservablesstate-hook",children:["The ",(0,t.jsx)(n.code,{children:"useObservablesState"})," Hook"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useObservablesState"})," hook is a small utility that allows you to subscribe to an ",(0,t.jsx)(n.code,{children:"ObservableState"})," instance and re-render your component when its state changes. The ",(0,t.jsx)(n.code,{children:"Chess"})," component uses this hook to subscribe to the ",(0,t.jsx)(n.code,{children:"chessInstance"})," and ",(0,t.jsx)(n.code,{children:"boardInstance"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"styling",children:"Styling"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@chess-barebones/chess-react"})," package does not provide any styling for the board or pieces. You are responsible for providing your own CSS to style the game."]}),"\n",(0,t.jsx)(n.h2,{id:"custom-board-example",children:"Custom Board Example"}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of how to create a custom ",(0,t.jsx)(n.code,{children:"Board"})," component and handle user input."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react';\nimport { RegularChess } from '@chess-barebones/chess-react';\nimport { Figure, Move } from '@chess-barebones/chess';\n\nconst CustomBoard = ({ boardFigures, moves, promotionMenu }) => {\n  const renderSquares = () => {\n    const squares = [];\n    for (let y = 8; y >= 1; y--) {\n      for (let x = 1; x <= 8; x++) {\n        const square = (x + y) % 2 === 0 ? 'white' : 'black';\n        squares.push(\n          <div key={`${x}-${y}`} className={`square ${square}`}>\n            {/* Render figure, move highlights, etc. */}\n          </div>\n        );\n      }\n    }\n    return squares;\n  };\n\n  return (\n    <div className=\"board\">\n      {renderSquares()}\n      {boardFigures}\n      {moves}\n      {promotionMenu}\n    </div>\n  );\n};\n\nconst FigureComponent = ({ name, color, onSelect }) => (\n  <div className={`figure ${name} ${color}`} onClick={onSelect}>\n    {/* Render figure SVG or image */}\n  </div>\n);\n\nconst MoveHighlight = ({ onSelect }) => (\n  <div className=\"move-highlight\" onClick={onSelect} />\n);\n\nconst PawnPromotionMenu = ({ onSelect, onCancel }) => (\n  <div className=\"promotion-menu\">\n    <button onClick={() => onSelect(Figure.QUEEN)}>Q</button>\n    <button onClick={() => onSelect(Figure.ROOK)}>R</button>\n    <button onClick={() => onSelect(Figure.BISHOP)}>B</button>\n    <button onClick={() => onSelect(Figure.KNIGHT)}>N</button>\n    <button onClick={onCancel}>X</button>\n  </div>\n);\n\nexport default function App() {\n  return (\n    <RegularChess\n      components={{\n        Board: CustomBoard,\n        Figure: FigureComponent,\n        MoveHighlight,\n        PawnPromotionMenu,\n      }}\n      playingFor=\"white\"\n    />\n  );\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);