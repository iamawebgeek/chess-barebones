"use strict";(self.webpackChunkchess_barebones_docs=self.webpackChunkchess_barebones_docs||[]).push([[232],{1134:(e,a,r)=>{r.d(a,{R:()=>t,x:()=>c});var s=r(3917);const n={},o=s.createContext(n);function t(e){const a=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),s.createElement(o.Provider,{value:a},e.children)}},1274:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"advanced-guides/creating-a-new-board-game","title":"Creating a New Board Game","description":"This guide explains how to use the @chess-barebones/core package to create a new board game from scratch.","source":"@site/docs/advanced-guides/creating-a-new-board-game.md","sourceDirName":"advanced-guides","slug":"/advanced-guides/creating-a-new-board-game","permalink":"/chess-barebones/docs/advanced-guides/creating-a-new-board-game","draft":false,"unlisted":false,"editUrl":"https://github.com/iamawebgeek/chess-barebones/tree/main/docs/docs/advanced-guides/creating-a-new-board-game.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Double-Move Chess","permalink":"/chess-barebones/docs/advanced-guides/double-move-chess"},"next":{"title":"Custom Boards","permalink":"/chess-barebones/docs/advanced-guides/custom-boards"}}');var n=r(1273),o=r(1134);const t={sidebar_position:3},c="Creating a New Board Game",i={},d=[{value:"1. Define Your Game Pieces",id:"1-define-your-game-pieces",level:2},{value:"2. Create Figure Classes",id:"2-create-figure-classes",level:2},{value:"3. Create a Figure Factory",id:"3-create-a-figure-factory",level:2},{value:"4. Create a Game Class",id:"4-create-a-game-class",level:2}];function l(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"creating-a-new-board-game",children:"Creating a New Board Game"})}),"\n",(0,n.jsxs)(a.p,{children:["This guide explains how to use the ",(0,n.jsx)(a.code,{children:"@chess-barebones/core"})," package to create a new board game from scratch."]}),"\n",(0,n.jsx)(a.h2,{id:"1-define-your-game-pieces",children:"1. Define Your Game Pieces"}),"\n",(0,n.jsx)(a.p,{children:"The first step is to define the pieces for your game. You can do this by creating a new enum or a union of string literals."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"enum MyGameFigure {\n  PAWN = 'pawn',\n  KING = 'king',\n}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"2-create-figure-classes",children:"2. Create Figure Classes"}),"\n",(0,n.jsxs)(a.p,{children:["Next, you'll need to create classes for each of your game pieces. These classes should extend ",(0,n.jsx)(a.code,{children:"AbstractFigure"})," and implement their own logic for moves."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import { AbstractFigure, Coordinate } from '@chess-barebones/core';\n\nclass Pawn extends AbstractFigure<MyGameFigure> {\n  getAvailableMoves(): Coordinate[] {\n    // ... implementation\n    return [];\n  }\n  // ... other methods\n}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"3-create-a-figure-factory",children:"3. Create a Figure Factory"}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"FigureFactory"})," is responsible for creating the correct type of figure based on its name."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import { FigureFactory, AbstractFigure } from '@chess-barebones/core';\n\nclass MyGameFigureFactory implements FigureFactory<MyGameFigure> {\n  create(name: MyGameFigure, player: Player, board: AbstractBoard<MyGameFigure>, coordinate: Coordinate): AbstractFigure<MyGameFigure> {\n    switch (name) {\n      case MyGameFigure.PAWN:\n        return new Pawn(player, board, coordinate);\n      // ... other cases\n    }\n  }\n}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"4-create-a-game-class",children:"4. Create a Game Class"}),"\n",(0,n.jsxs)(a.p,{children:["Finally, you'll need to create a ",(0,n.jsx)(a.code,{children:"Game"})," class for your game. This class will be responsible for managing the game loop, players, and moves."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import { Game, Board8x8 } from '@chess-barebones/core';\n\nclass MyGame extends Game<MyGameFigure, any> {\n  constructor() {\n    const board = new Board8x8<MyGameFigure>(new MyGameFigureFactory());\n    // ... other setup\n    super(board, serializer, handler);\n  }\n}\n"})}),"\n",(0,n.jsxs)(a.p,{children:["With these four steps, you can create any board game you can imagine using the ",(0,n.jsx)(a.code,{children:"@chess-barebones/core"})," package."]})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);