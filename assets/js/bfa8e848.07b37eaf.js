"use strict";(self.webpackChunkchess_barebones_docs=self.webpackChunkchess_barebones_docs||[]).push([[2515],{1134:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var s=n(3917);const o={},i=s.createContext(o);function t(e){const r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:r},e.children)}},5953:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-reference/core/game","title":"Game","description":"Game","source":"@site/docs/api-reference/core/game.md","sourceDirName":"api-reference/core","slug":"/api-reference/core/game","permalink":"/docs/api-reference/core/game","draft":false,"unlisted":false,"editUrl":"https://github.com/iamawebgeek/chess-barebones/tree/main/docs/docs/api-reference/core/game.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Core API Reference","permalink":"/docs/api-reference/core/"},"next":{"title":"Board","permalink":"/docs/api-reference/core/board"}}');var o=n(1273),i=n(1134);const t={sidebar_position:2},a="Game",c={},l=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"game",children:"Game"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.code,{children:"Game<FigureName extends string, Move extends object, PlayerColor extends string = string>"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"Game"})," class is the main orchestrator of the game loop. It manages the players, the board, and the moves."]}),"\n",(0,o.jsx)(r.h2,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.code,{children:"constructor(board: AbstractBoard<FigureName>, serializer: MoveSerializer<FigureName, Move>, handler: Handler = {})"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"board"}),": An instance of ",(0,o.jsx)(r.code,{children:"AbstractBoard"})," that represents the game board."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"serializer"}),": An instance of ",(0,o.jsx)(r.code,{children:"MoveSerializer"})," that is responsible for serializing and deserializing moves."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"handler"}),": An object that implements the ",(0,o.jsx)(r.code,{children:"Handler"})," interface, which allows you to hook into various game events."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"board: AbstractBoard<FigureName>"}),": The game board."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"serializer: MoveSerializer<FigureName, Move>"}),": The move serializer."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"handler: Handler"}),": The game handler."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"state: GameState<PlayerColor>"}),": The current state of the game."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"addPlayer(player: Player<PlayerColor>): void"}),": Adds a player to the game."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"getPlayers(): Player<PlayerColor>[]"}),": Returns an array of all the players in the game."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"getPlayerToMove(): Player<PlayerColor> | null"}),": Returns the next player to move."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"start(): void"}),": Starts the game."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"move(move: string): void"}),": Makes a move in the game."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);