"use strict";(self.webpackChunkchess_barebones_docs=self.webpackChunkchess_barebones_docs||[]).push([[9386],{1134:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var s=r(3917);const t={},o=s.createContext(t);function c(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(o.Provider,{value:n},e.children)}},8314:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-reference/react/puzzle","title":"Puzzle Component","description":"Puzzle: React.FC","source":"@site/docs/api-reference/react/puzzle.md","sourceDirName":"api-reference/react","slug":"/api-reference/react/puzzle","permalink":"/docs/api-reference/react/puzzle","draft":false,"unlisted":false,"editUrl":"https://github.com/iamawebgeek/chess-barebones/tree/main/docs/docs/api-reference/react/puzzle.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"RegularChess Component","permalink":"/docs/api-reference/react/regular-chess-component"},"next":{"title":"useObservablesState Hook","permalink":"/docs/api-reference/react/use-observables-state"}}');var t=r(1273),o=r(1134);const c={sidebar_position:4},i="Puzzle Component",a={},l=[{value:"Props",id:"props",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"puzzle-component",children:"Puzzle Component"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Puzzle: React.FC<PuzzleProps>"})}),"\n",(0,t.jsx)(n.p,{children:"Renders a Chess game configured with the PuzzleProcessor for interactive puzzle flows."}),"\n",(0,t.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,t.jsxs)(n.p,{children:["Accepts all the props of the ",(0,t.jsx)(n.code,{children:"Chess"})," component except for ",(0,t.jsx)(n.code,{children:"chessInstance"})," and ",(0,t.jsx)(n.code,{children:"boardInstance"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Additional props:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"playingFor: Color"})," \u2014 Which side the user plays for."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"initialPosition: string"})," \u2014 Serialized board position the puzzle starts from (Board8x8 serialization)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"autoFirstMove: boolean"})," \u2014 If true, the first expected move from the puzzle sequence is played automatically."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"movesGenerator: AsyncGeneratorFunction | GeneratorFunction"})," \u2014 A generator that yields expected moves in algebraic notation (e.g., 'e4', 'Nf3', etc.)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"handler?: Handler"})," \u2014 Optional handler to observe game events."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chessRef?: React.RefObject<Game>"})," \u2014 Ref to access the underlying Game instance."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);