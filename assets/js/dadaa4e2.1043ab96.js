"use strict";(self.webpackChunkchess_barebones_docs=self.webpackChunkchess_barebones_docs||[]).push([[8093],{1134:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>d});var r=o(3917);const a={},t=r.createContext(a);function s(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(t.Provider,{value:n},e.children)}},8067:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced-guides/custom-boards","title":"Custom Boards","description":"This guide explains how to create a custom board for a different shape, for example, to play with 4 people.","source":"@site/docs/advanced-guides/custom-boards.md","sourceDirName":"advanced-guides","slug":"/advanced-guides/custom-boards","permalink":"/chess-barebones/docs/advanced-guides/custom-boards","draft":false,"unlisted":false,"editUrl":"https://github.com/iamawebgeek/chess-barebones/tree/main/docs/docs/advanced-guides/custom-boards.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Creating a New Board Game","permalink":"/chess-barebones/docs/advanced-guides/creating-a-new-board-game"},"next":{"title":"Core API Reference","permalink":"/chess-barebones/docs/api-reference/core/"}}');var a=o(1273),t=o(1134);const s={sidebar_position:4},d="Custom Boards",i={},c=[{value:"The <code>AbstractBoard</code> Class",id:"the-abstractboard-class",level:2},{value:"Example: A 4-Player Board",id:"example-a-4-player-board",level:2},{value:"Using the Custom Board",id:"using-the-custom-board",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"custom-boards",children:"Custom Boards"})}),"\n",(0,a.jsx)(n.p,{children:"This guide explains how to create a custom board for a different shape, for example, to play with 4 people."}),"\n",(0,a.jsxs)(n.h2,{id:"the-abstractboard-class",children:["The ",(0,a.jsx)(n.code,{children:"AbstractBoard"})," Class"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"@chess-barebones/core"})," package provides the ",(0,a.jsx)(n.code,{children:"AbstractBoard"})," class, which can be extended to create a board of any shape or size. You'll need to implement the following methods:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"getCoordinateWithVector(coordinate: Coordinate, vector: [number, number]): Coordinate | null"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"serializeCoordinate(coordinate: Coordinate): string"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"deserializeCoordinate(coordinate: string): Coordinate"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example-a-4-player-board",children:"Example: A 4-Player Board"}),"\n",(0,a.jsx)(n.p,{children:"Here is an example of how to create a 4-player board. The board is a 14x14 grid with a 3x8 area for each player's pieces."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { AbstractBoard, Coordinate } from '@chess-barebones/core';\n\nclass FourPlayerBoard extends AbstractBoard<MyGameFigure> {\n  // Implement the abstract methods\n\n  getCoordinateWithVector(coordinate: Coordinate, vector: [number, number]): Coordinate | null {\n    const newX = coordinate.x + vector[0];\n    const newY = coordinate.y + vector[1];\n\n    if (newX < 0 || newX >= 14 || newY < 0 || newY >= 14) {\n      return null;\n    }\n\n    // Add logic to handle the non-playable areas of the board\n\n    return { x: newX, y: newY };\n  }\n\n  serializeCoordinate(coordinate: Coordinate): string {\n    // ... implementation\n    return `${coordinate.x},${coordinate.y}`;\n  }\n\n  deserializeCoordinate(coordinate: string): Coordinate {\n    // ... implementation\n    const [x, y] = coordinate.split(',').map(Number);\n    return { x, y };\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"using-the-custom-board",children:"Using the Custom Board"}),"\n",(0,a.jsxs)(n.p,{children:["Once you have created your custom board, you can use it to create a new ",(0,a.jsx)(n.code,{children:"Game"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Game } from '@chess-barebones/core';\n\nconst board = new FourPlayerBoard(new MyGameFigureFactory());\nconst game = new Game(board, serializer, handler);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);