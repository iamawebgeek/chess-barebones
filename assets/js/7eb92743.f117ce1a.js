"use strict";(self.webpackChunkchess_barebones_docs=self.webpackChunkchess_barebones_docs||[]).push([[3246],{1134:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var o=n(3917);const t={},i=o.createContext(t);function r(e){const s=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:s},e.children)}},5397:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"guides/puzzles","title":"Puzzles","description":"This guide explains how to create interactive puzzles with Chess barebones.","source":"@site/docs/guides/puzzles.md","sourceDirName":"guides","slug":"/guides/puzzles","permalink":"/docs/guides/puzzles","draft":false,"unlisted":false,"editUrl":"https://github.com/iamawebgeek/chess-barebones/tree/main/docs/docs/guides/puzzles.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"React Integration","permalink":"/docs/guides/react-integration"},"next":{"title":"Timers","permalink":"/docs/guides/timers"}}');var t=n(1273),i=n(1134);const r={sidebar_position:3},c="Puzzles",l={},a=[{value:"The <code>PuzzleProcessor</code>",id:"the-puzzleprocessor",level:2},{value:"The <code>Puzzle</code> Component",id:"the-puzzle-component",level:2},{value:"Example",id:"example",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"puzzles",children:"Puzzles"})}),"\n",(0,t.jsx)(s.p,{children:"This guide explains how to create interactive puzzles with Chess barebones."}),"\n",(0,t.jsxs)(s.h2,{id:"the-puzzleprocessor",children:["The ",(0,t.jsx)(s.code,{children:"PuzzleProcessor"})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"PuzzleProcessor"})," from ",(0,t.jsx)(s.code,{children:"@chess-barebones/core"})," allows you to create interactive puzzles. A puzzle is defined by an initial position and a sequence of moves. The initial position should be the serialization of the board that could be obtained by calling ",(0,t.jsx)(s.code,{children:"serializePosition"})," method on a board instance."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"PuzzleProcessor"})," supports both synchronous and asynchronous generator functions for the ",(0,t.jsx)(s.code,{children:"movesGenerator"}),". The generator function should yield moves until the puzzle is solved. When the player makes a move, the ",(0,t.jsx)(s.code,{children:"PuzzleProcessor"})," will check if it matches the next move from the generator. If it does, the processor will make the next move for the opponent."]}),"\n",(0,t.jsxs)(s.h2,{id:"the-puzzle-component",children:["The ",(0,t.jsx)(s.code,{children:"Puzzle"})," Component"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"Puzzle"})," component from ",(0,t.jsx)(s.code,{children:"@chess-barebones/chess-react"})," makes it easy to render a puzzle in a React application."]}),"\n",(0,t.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { Puzzle } from '@chess-barebones/chess-react';\n\nasync function* myPuzzle() {\n  let moveNumber = 0;\n  while (++moveNumber < 5) {\n    yield await getMove(moveNumber);\n  }\n}\n\n<Puzzle\n  initialPosition=\"w-king-1:e1:-;b-king-1:e8:-;\"\n  movesGenerator={myPuzzle}\n  components={{ Board, Figure, MoveHighlight, PawnPromotionMenu }}\n/>;\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);